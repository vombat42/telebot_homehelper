import configparser
import telebot
from telebot import types
import psycopg2
from datetime import date


#----------------------------------------------------------------------------

config = configparser.ConfigParser()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞
config.read("settings.ini")  # —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
# –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫–∞–∫ –∫ –æ–±—ã—á–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä—é!
token = config['Telegram']['token'] 
pg_dbname = config['Postgres']['pg_dbname']
pg_user = config['Postgres']['pg_user']
pg_userpass = config['Postgres']['pg_userpass']
pg_host = config['Postgres']['pg_host']
pg_port = config['Postgres']['pg_port']

#----------------------------------------------------------------------------

bot=telebot.TeleBot(token)

bot.set_my_commands([
    telebot.types.BotCommand("/start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    telebot.types.BotCommand("/exercise", "üèã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"),
    telebot.types.BotCommand("/report", "üìú –æ—Ç—á–µ—Ç"),
    telebot.types.BotCommand("/graph", "üìä –≥—Ä–∞—Ñ–∏–∫"),
    telebot.types.BotCommand("/hello", "‚úã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    telebot.types.BotCommand("/help", "–ü–æ–º–æ—â—å")
])

t_exercises='exercises' # —Ç–∞–±–ª–∏—Ü–∞ –ë–î "—Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
t_events='events' # —Ç–∞–±–ª–∏—Ü–∞ –ë–î "—Å–æ–±—ã—Ç–∏—è (–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)"
message_list=[] # —Å–ø–∏—Å–æ–∫ id —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
current_mess_id = 0 # id –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
exercise_id = -1
exercise_count = 0

# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
conn = psycopg2.connect(f'postgresql://{pg_user}:{pg_userpass}@{pg_host}:{pg_port}/{pg_dbname}')
conn.autocommit = True
cur = conn.cursor()
cur.execute(
   f"SELECT id, ex_name, ex_unit FROM {t_exercises};"
)
buttons=cur.fetchall()
cur.close()
conn.close()
markup_ex = types.InlineKeyboardMarkup(row_width=3)
for i in range(0,len(buttons), 3):
	if len(buttons)-i>=3:
		item1=types.InlineKeyboardButton(text=buttons[i][1], callback_data=str(i))
		item2=types.InlineKeyboardButton(text=buttons[i+1][1], callback_data=str(i+1))
		item3=types.InlineKeyboardButton(text=buttons[i+2][1], callback_data=str(i+2))
	elif len(buttons)-i==2:
		item1=types.InlineKeyboardButton(text=buttons[i][1], callback_data=str(i))
		item2=types.InlineKeyboardButton(text=buttons[i+1][1], callback_data=str(i+1))
		item3=types.InlineKeyboardButton(text=' ', callback_data='-1')
	elif len(buttons)-i==1:
		item1=types.InlineKeyboardButton(text=buttons[i][1], callback_data=str(i))
		item2=types.InlineKeyboardButton(text=' ', callback_data='-1')
		item3=types.InlineKeyboardButton(text=' ', callback_data='-1')
	markup_ex.add(item1, item2, item3)
markup_ex.row(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='-2'))

# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞
markup_yes_no = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1=types.KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å")
item2=types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")
markup_yes_no.add(item1, item2)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
states = {
   'choose_exercise': 0,
   'enter_count': 1,
   'confirm': 2,
}
ex_states = [0,1,2] # —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_state = {}

#----------------------------------------------------------------------------

# –∫—Ç–æ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ userlist - –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ
userlist=(406827859,)
@bot.message_handler(func=lambda message: message.chat.id not in userlist)
def some(message):
   bot.send_message(message.chat.id, "Sorry...")

#----------------------------------------------------------------------------

def db_events_add(chat_id, ex_id, ex_count, ex_date):
	conn = psycopg2.connect(f'postgresql://{pg_user}:{pg_userpass}@{pg_host}:{pg_port}/{pg_dbname}')
	conn.autocommit = True
	cur = conn.cursor()
	cur.execute(f"SELECT id FROM users WHERE chat_id='{chat_id}';")
	user_id=cur.fetchone()[0]
	cur.execute(
	   f"INSERT INTO {t_events} (date_enent, user_id, ex_id, ex_count) VALUES ('{ex_date}',{user_id},{ex_id},{ex_count});"
	)
	cur.close()
	conn.close()


def del_mess_from_mess_list(message):
	global message_list, current_mess_id
	for i in message_list:
		bot.delete_message(chat_id=message.chat.id, message_id=i)
	message_list.clear()
	if current_mess_id != 0:
		bot.delete_message(chat_id=message.chat.id, message_id=current_mess_id)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
@bot.message_handler(commands=['exercise'])
def exercises_list(message):
	global message_list, ex_states
	if current_state.get(message.chat.id) in ex_states:
		bot.delete_message(message.chat.id, message.id)
		return
	mess = bot.send_message(message.chat.id, '–ù–∞–∂–∏–º–∞–π –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø–æ—Ç–æ–º –≤–≤–æ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup = markup_ex)
	message_list.append(mess.id)
	current_state[message.chat.id] = states['choose_exercise']

@bot.callback_query_handler(func=lambda call: True)
def choose_exercise(call):
	global current_mess_id, exercise_id, exercise_count, message_list
	if call.data == '-2': # –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		bot.answer_callback_query(call.id, f'–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
		bot_message = f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>{buttons[exercise_id][1]}({buttons[exercise_id][2]})</b>'
		mess = bot.send_message(call.message.chat.id, '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
		current_state[call.message.chat.id] = -1
		del_mess_from_mess_list(call.message)
		return
	if call.data == '-1': # –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ø—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞
		bot.answer_callback_query(call.id, f'–ù–∞–∂–∞—Ç–∞ –ø—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞')
		return
	if current_state[call.message.chat.id] != states['choose_exercise']: # –µ—Å–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
		if current_state[call.message.chat.id] == states['enter_count']: # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
			bot.delete_message(call.message.chat.id, current_mess_id)
		else:
			bot.answer_callback_query(call.id, f'–°–µ–π—á–∞—Å –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞')
			return
	exercise_id = int(call.data)
	bot_message = f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>{buttons[exercise_id][1]}({buttons[exercise_id][2]})</b>'
	mess = bot.send_message(call.message.chat.id, bot_message, parse_mode='HTML')
	current_mess_id = mess.id
	current_state[call.message.chat.id] = states['enter_count']
	bot.answer_callback_query(call.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {buttons[exercise_id][1]}')


# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: current_state.get(message.chat.id) == states['choose_exercise'])
def del_mess(message):
	bot.delete_message(chat_id=message.chat.id, message_id=message.id)


# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
@bot.message_handler(func=lambda message: current_state.get(message.chat.id) == states['enter_count'])
def count_exercise(message):
	global current_mess_id, exercise_id, exercise_count
	if message.text.isdigit(): #–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
		count = int(message.text)
		if count > 0:
			bot_message = f'–ó–∞–ø–∏—Å–∞—Ç—å <b><u>{buttons[exercise_id][1]} - {count} {buttons[exercise_id][2]}</u></b> ?'
			bot.delete_message(chat_id=message.chat.id, message_id=current_mess_id)
			mess = bot.send_message(message.chat.id, bot_message, parse_mode='HTML', reply_markup = markup_yes_no)
			current_mess_id = mess.id
			exercise_count = count
			current_state[message.chat.id] = states['confirm']
	bot.delete_message(message.chat.id, message.id)

# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
@bot.message_handler(func=lambda message: current_state.get(message.chat.id) == states['confirm'])
def record_event(message):
	global current_mess_id, exercise_id, exercise_count 
	if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å':
		exercise_date = str(date.today())
		db_events_add(message.chat.id, buttons[exercise_id][0], exercise_count, exercise_date)
		bot_message  = f'<b><u>–ó–∞–ø–∏—Å–∞–Ω–æ</u></b> : {buttons[exercise_id][1]} - {exercise_count} {buttons[exercise_id][2]} !'
		bot.delete_message(chat_id=message.chat.id, message_id=current_mess_id)
		mess = bot.send_message(message.chat.id, bot_message, parse_mode='HTML')
		current_mess_id = 0
		current_state[message.chat.id] = states['choose_exercise']
	elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot_message = f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>{buttons[exercise_id][1]}({buttons[exercise_id][2]})</b>'
		bot.delete_message(chat_id=message.chat.id, message_id=current_mess_id)
		mess = bot.send_message(message.chat.id, bot_message, parse_mode='HTML')
		current_mess_id = mess.id
		current_state[message.chat.id] = states['enter_count']
	else:
		bot_message = f'–ó–∞–ø–∏—Å–∞—Ç—å <b><u>{buttons[exercise_id][1]} - {exercise_count} {buttons[exercise_id][2]}</u></b> ?'
		bot.delete_message(chat_id=message.chat.id, message_id=current_mess_id)
		mess = bot.send_message(message.chat.id, bot_message, parse_mode='HTML', reply_markup = markup_yes_no)
		current_mess_id = mess.id
	bot.delete_message(message.chat.id, message.id)


@bot.message_handler(commands=['start'])
def start_message(message):
	bot.send_message(message.chat.id,"–ü—Ä–∏—Å—Ç—É–ø–∏–º :)")


@bot.message_handler(commands=['hello'])
def hello_message(message):
	global user_enter_id
	bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç, {0.first_name}! ‚úåÔ∏è ".format(message.from_user))


@bot.message_handler(commands=['report'])
def report_message(message):
	bot.send_message(message.chat.id,"–í–æ—Ç —Ç–≤–æ–π –æ—Ç—á–µ—Ç")


@bot.message_handler(commands=['graph'])
def graph_message(message):
	bot.send_message(message.chat.id,"üìä")


def privet(message):
	return message.text == '–ü—Ä–∏–≤–µ—Ç'

@bot.message_handler(func = privet)
def message_1(message):
	bot.send_message(message.chat.id,"–ò –≤–∞–º –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å")


#----------------------------------------------------------------------------

bot.infinity_polling()
